swagger: "2.0"

info:
  version: 1.0.0
  title: "The Student Food forum"
  description: "A forum API where accounts can post recipts about food and comment to them."
  contact:
    name: "Filip Andersson"
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
host: "localhost"
basePath: "/v1"
tags:
  - name: "accounts"
  - name: "recipes"
  - name: "comments"
  - name: "votes"

schemes:
  - "http"
  - "https"

securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: "https://localhost:3000/authorize"
    tokenUrl: "https://exemple.com/oauth/token"
    scopes:
      account: Grand access to all content and possibility to edit own content.
      admin: All access of account and the power to change others posts
security:
  - ApiKeyAuth: []
  - OAuth2: [account, admin]

paths:
  ################################################################
  #                          Account                             #
  ################################################################
  /accounts:
    get:
      tags:
        - "accounts"
      summary: "Get accounts."
      consumes:
        - "application/json"
      description: ""
      parameters:
        - in: query
          name: search
          type: string
          description: "Query string that will filter search result on account nickname."
        - in: query
          name: limit
          type: integer
          description: "How many accounts will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many accounts that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/accounts"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"

    post:
      tags:
        - "accounts"
      summary: "Create a new account."
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "account"
          schema:
            type: object
            allOf:
              - $ref: "#/definitions/postAccount"
            properties:
              nickname:
                type: string
      responses:
        201:
          description: "Account created."
          headers:
            Location:
              type: "string"
        400:
          description: "Missing required input parameter in body!"
          schema:
            $ref: "#definitions/error"
        409:
          description: "Account already exists!"
          schema:
            $ref: "#definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"

  /accounts/{accountId}:
    patch:
      tags:
        - "accounts"
      summary: "Edit given account."
      description: ""
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "accountId"
          in: "path"
          description: "The id of the account."
          type: "string"
          required: true
        - name: "nickname"
          in: "formData"
          type: "string"
          description: "Edit the account nickname. If left blank it will not be edited."
        - name: "password"
          in: "formData"
          type: "string"
          description: "Edit the account password. If left blank it will not be edited."
        - name: "image"
          in: "formData"
          description: "Add/edit the account image. If left blank it will not be added/edited."
          type: "file"
      responses:
        200:
          description: "OK"
        400:
          description: "Missing parameter!"
          schema:
            $ref: "#definitions/error"
        401:
          description: "Cannot find account!"
          schema:
            $ref: "#definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"

    delete:
      tags:
        - "accounts"
      summary: "Delete given account."
      description: ""
      parameters:
        - name: "accountId"
          in: "path"
          description: "accountId"
          type: "string"
          required: true
      responses:
        200:
          description: "Account succsessfully deleted"
        404:
          description: "Account was not found!"
          schema:
            $ref: "#definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"
  ################################################################
  #                          Recipes                             #
  ################################################################
  /recipes:
    get:
      tags:
        - "recipes"
      summary: "Get all recipes."
      description: ""
      parameters:
        - in: query
          name: recipesId
          type: string
          description: "Id of the recipes."
        - in: query
          name: title
          type: string
          description: "Title of the recipes."
        - in: query
          name: authorId
          type: string
          description: "Id of the author."
        - in: query
          name: tags
          type: array
          description: "List of tags to be filterd by."
          items:
            type: string
        - in: query
          name: order
          type: string
          enum: [alphabetical, time, rating]
          description: "How recipes are sorted."
          default: rating
        - in: query
          name: limit
          type: integer
          description: "How many recipes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many recipes that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/recipes"
        500:
          description: "Internal server error"
          schema:
            $ref: "#definitions/error"

    post:
      tags:
        - "recipes"
      summary: "Create new recipes."
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "accountId"
          in: "formData"
          description: "The id of the account."
          type: "string"
          required: true
        - name: "title"
          in: "formData"
          type: "string"
          description: "The title of the recipe."
          required: true
        - name: "content"
          in: "formData"
          type: "string"
          description: "The description of the recipe."
          required: true
        - name: "image"
          in: "formData"
          description: "Add the recipe image. If left blank it will not be added."
          type: "file"
      description: ""
      responses:
        201:
          description: "Recipes created!"
          headers:
            Location:
              type: "string"
        400:
          description: "Bad request!"
          schema:
            $ref: "#definitions/error"
        404:
          description: "Cannot find account!"
          schema:
            $ref: "#definitions/error"
        500:
          schema:
            $ref: "#definitions/error"
          description: "Internal server error!"

  /recipes/{recipesId}:
    patch:
      tags:
        - "recipes"
      summary: "Edit a given post."
      description: ""
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "recipeId"
          in: "formData"
          description: "The id of the recipe."
          type: "string"
          required: true
        - name: "title"
          in: "formData"
          type: "string"
          description: "Edited title. If left blank it will not be edited."
        - name: "content"
          in: "formData"
          type: "string"
          description: "Edited description. If left blank it will not be edited."
        - name: "image"
          in: "formData"
          description: "Add/change the recipe image. If left blank it will not be added/changed."
          type: "file"
      responses:
        200:
          description: "Successfully changed!"
        400:
          description: "Bad request!"
          schema:
            $ref: "#definitions/error"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#definitions/error"
        404:
          description: "Recipes not found!"
          schema:
            $ref: "#definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"

    delete:
      tags:
        - "recipes"
      summary: "Delete a given recipes."
      description: ""
      parameters:
        - name: "recipeId"
          in: "path"
          description: "RecipeId"
          type: "string"
          required: true
      responses:
        200:
          description: "Successfully deleted recipes!"
        400:
          description: "Bad request!"
          schema:
            $ref: "#definitions/error"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#definitions/error"
        404:
          description: "Recipe not found!"
          schema:
            $ref: "#definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#definitions/error"

  ################################################################
  #                          Comments                            #
  ################################################################
  /comments:
    get:
      tags:
        - "comments"
      summary: "Get all comments."
      description: ""
      parameters:
        - in: "query"
          name: "recipesId"
          type: "string"
          required: false
          description: "Get all comments for a specific recipesId"

        - in: query
          name: order
          type: string
          enum: [alphabetical, time]
          description: "How accounts are returned accounts are sorted."
          default: time
        - in: query
          name: limit
          type: integer
          description: "How many comments will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many comments that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/getComments"
        404:
          schema:
            $ref: "#definitions/error"
          description: "No comments found"
    post:
      tags:
        - "comments"
      summary: "Create new comment."
      description: ""
      parameters:
        - in: "body"
          name: "comment"
          schema:
            $ref: "#/definitions/postComments"

      responses:
        201:
          description: "Comment successfully created"
        400:
          schema:
            $ref: "#definitions/error"
          description: "Bad request"
        500:
          schema:
            $ref: "#definitions/error"
          description: "Internal server error"

  /comments/{commentId}:
    put:
      tags:
        - "comments"
      summary: "Edit a given account."
      description: ""
      parameters:
        - name: "commentId"
          in: "path"
          description: "comment Id"
          type: "string"
          required: true
        - name: "comment"
          in: body
          description: "The content of comment"
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: "Successfully changed"
        404:
          schema:
            $ref: "#definitions/error"
          description: "Comment not found"
        500:
          schema:
            $ref: "#definitions/error"
          description: "Internal server error"

    delete:
      tags:
        - "comments"
      summary: "Delete a given account."
      description: ""
      parameters:
        - name: "commentId"
          in: "path"
          description: "comment id"
          type: "string"
          required: true
      responses:
        200:
          description: "Successfully deleted"
        404:
          schema:
            $ref: "#definitions/error"
          description: "Comment not found"
        500:
          schema:
            $ref: "#definitions/error"
          description: "Internal server error"
  ################################################################
  #                          Votes                               #
  ################################################################
  /votes:
    get:
      tags:
        - "votes"
      summary: "Get votes from one user."
      description: "Gets all the users own votes"
      parameters:
        - in: query
          name: "accountId"
          type: string
          required: true
        - in: query
          name: order
          type: string
          enum: [alphabetical, time, rating]
          description: "How votes are sorted."
          default: rating
        - in: query
          name: limit
          type: integer
          description: "How many votes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many votes that will be skipped."
          default: 0
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: "#/definitions/getVotes"
        404:
          schema:
            $ref: "#definitions/error"
          description: "Not tags found"
    post:
      tags:
        - "votes"
      summary: "Create a vote from a user"
      description: ""
      parameters:
        - in: body
          name: "vote"
          schema:
            $ref: "#/definitions/postVotes"
      responses:
        201:
          description: "Vote created"
        404:
          schema:
            $ref: "#definitions/error"
          description: "user or recipe dosnt exist"
################################################################
#                          Models                             #
################################################################
definitions:
  error:
    type: object
    properties:
      errorMessage:
        type: string
  postAccount:
    type: object
    properties:
      email:
        type: string
        format: "email"
        example: "foo@gmail.com"
      password:
        type: string
        format: "password"
    required:
      - password
      - email
  recipes:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      title:
        type: string
      content:
        type: string
      imageId:
        type: string
        format: path
      updatedAt:
        type: string
    required:
      - accountId
  getComments:
    type: object
    properties:
      accountId:
        type: string
      content:
        type: string
      commentId:
        type: string
  postComments:
    type: object
    properties:
      accountId:
        type: string
      content:
        type: string
      recipeId:
        type: string
    required:
      - accountId
      - recipeId
  tags:
    type: object
    properties:
      id:
        type: string
        format: nameOfTag
    required:
      - id
  accounts:
    type: object
    properties:
      id:
        type: string
      nickname:
        type: string
      imageId:
        type: string
  postVotes:
    type: object
    properties:
      accountId:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
    required:
      - accountId
      - recipeId
      - vote
  getVotes:
    type: object
    properties:
      title:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
