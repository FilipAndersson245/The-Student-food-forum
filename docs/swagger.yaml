swagger: "2.0"

info:
  version: 1.0.16
  title: "The Student Food forum"
  description: |
    A forum API where accounts can post recipts about food and comment to them.
    The application uses bearer token to authenticate requests.
    This token is created by requests to the /session router.

    All data is bound to the account and if ever deleted all other data will be cascaded.
    Comments are bound to the recipe and will also cascade if recipe is deleted.

  contact:
    name: "Filip Andersson, Marcus Gullstrand"
host: "thesff.us-east-1.elasticbeanstalk.com"
tags:
  - name: "session"
  - name: "recipes"
  - name: "accounts"
  - name: "comments"
  - name: "votes"

paths:
  ################################################################
  #                          Account                             #
  ################################################################
  /accounts:
    get:
      tags:
        - "accounts"
      summary: "Get accounts."
      produces:
        - "application/json"
      description: ""
      parameters:
        - in: query
          name: search
          type: string
          description: "Query string that will filter search result on account nickname."
        - in: query
          name: limit
          type: integer
          description: "How many accounts will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many accounts that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/accounts"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - "accounts"
      summary: "Create a new account."
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "account"
          schema:
            type: object
            allOf:
              - $ref: "#/definitions/postAccount"
            properties:
              nickname:
                type: string
      responses:
        201:
          description: "Account created."
          headers:
            Location:
              type: "string"
        400:
          description: "Missing required input parameter in body!"
          schema:
            $ref: "#/definitions/error"
        409:
          description: "Email already taken!"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

  /accounts/{accountId}:
    patch:
      tags:
        - "accounts"
      summary: "Edit given account."
      description: ""
      consumes:
        - "multipart/form-data"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "accountId"
          in: "path"
          description: "The id of the account."
          type: "string"
          required: true
        - name: "nickname"
          in: "formData"
          type: "string"
          description: "Edit the account nickname. If left blank it will not be edited."
        - name: "password"
          in: "formData"
          type: "string"
          description: "Edit the account password. If left blank it will not be edited."
        - name: "image"
          in: "formData"
          description: "Add/edit the account image. If left blank it will not be added/edited."
          type: "file"
      responses:
        200:
          description: "OK"
        400:
          description: "Missing parameter!"
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

    delete:
      tags:
        - "accounts"
      summary: "Delete given account."
      description: "Deleting a user will delete all of the users uploaded content (account, recipes, comments and votes)."
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "accountId"
          in: "path"
          description: "Is of the account"
          type: "string"
          required: true
      responses:
        200:
          description: "Account succsessfully deleted"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "Account was not found!"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"
  ################################################################
  #                          Recipes                             #
  ################################################################
  /recipes:
    get:
      tags:
        - "recipes"
      summary: "Get all recipes."
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: query
          name: recipesId
          type: string
          description: "Id of the recipes."
        - in: query
          name: title
          type: string
          description: "Title of the recipes."
        - in: query
          name: authorId
          type: string
          description: "Id of the author."
        - in: query
          name: limit
          type: integer
          description: "How many recipes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many recipes that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/recipes"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - "recipes"
      summary: "Create new recipes."
      consumes:
        - "multipart/form-data"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "accountId"
          in: "formData"
          description: "The id of the account."
          type: "string"
          required: true
        - name: "title"
          in: "formData"
          type: "string"
          description: "The title of the recipe."
          required: true
        - name: "content"
          in: "formData"
          type: "string"
          description: "The description of the recipe."
          required: true
        - name: "image"
          in: "formData"
          description: "Add the recipe image. If left blank it will not be added."
          type: "file"
      description: ""
      responses:
        201:
          description: "Recipes created!"
          headers:
            Location:
              type: "string"
        400:
          description: "Bad request!"
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "Cannot find account!"
          schema:
            $ref: "#/definitions/error"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"
  /recipes/{recipeId}:
    patch:
      tags:
        - "recipes"
      summary: "Edit a given post."
      description: ""
      consumes:
        - "multipart/form-data"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "recipeId"
          in: "path"
          description: "The id of the recipe."
          type: "string"
          required: true
        - name: "title"
          in: "formData"
          type: "string"
          description: "Edited title. If left blank it will not be edited."
        - name: "content"
          in: "formData"
          type: "string"
          description: "Edited description. If left blank it will not be edited."
        - name: "image"
          in: "formData"
          description: "Add/change the recipe image. If left blank it will not be added/changed."
          type: "file"
      responses:
        200:
          description: "Successfully changed!"
        400:
          description: "Bad request!"
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "Recipes not found!"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

    delete:
      tags:
        - "recipes"
      summary: "Delete a given recipes."
      description: ""
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "recipeId"
          in: "path"
          description: "RecipeId"
          type: "string"
          required: true
      responses:
        200:
          description: "Successfully deleted recipes!"
        400:
          description: "Bad request!"
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "Recipe not found!"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

  ################################################################
  #                          Comments                            #
  ################################################################
  /comments:
    get:
      tags:
        - "comments"
      summary: "Get all comments."
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "recipesId"
          type: "string"
          required: false
          description: "Get all comments for a specific recipesId"
        - in: query
          name: limit
          type: integer
          description: "How many comments will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many comments that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/getComments"
        400:
          description: "Missing parameter!"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - "comments"
      summary: "Create a new comment."
      description: ""
      consumes:
        - "application/json"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - in: "body"
          name: "comment"
          schema:
            $ref: "#/definitions/postComments"

      responses:
        201:
          description: "Comment successfully created!"
        400:
          description: "Missing parameter!"
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        500:
          description: "Internal server error!"
          schema:
            $ref: "#/definitions/error"

  /comments/{commentId}:
    patch:
      tags:
        - "comments"
      summary: "Edit a given account."
      consumes:
        - "application/json"
      description: ""
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "commentId"
          in: "path"
          description: "comment Id"
          type: "string"
          required: true
        - name: "comment"
          in: body
          description: "The content of comment"
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: "Successfully changed!"
        400:
          schema:
            $ref: "#/definitions/error"
          description: "Missing required parameter!"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"

    delete:
      tags:
        - "comments"
      summary: "Delete a given account."
      description: ""
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - name: "commentId"
          in: "path"
          description: "comment id"
          type: "string"
          required: true
      responses:
        200:
          description: "OK"
        400:
          schema:
            $ref: "#/definitions/error"
          description: "Missing required parameter!"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/error"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"
  ################################################################
  #                          Votes                               #
  ################################################################
  /votes:
    get:
      tags:
        - "votes"
      summary: "Get votes from one user."
      description: "Gets all the users own votes"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - in: query
          name: "accountId"
          type: string
          required: true
        - in: query
          name: limit
          type: integer
          description: "How many votes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many votes that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/getVotes"
        400:
          schema:
            $ref: "#/definitions/error"
          description: "Missing parameter!"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"

    post:
      tags:
        - "votes"
      summary: "Create a vote from an account."
      description: |
        "Used to create a vote from an account to a recipe.
         If a vote already exists, the preexisting vote will be updated with the new vote value."
      parameters:
        - in: "header"
          name: "Authorization"
          description: "Bearer JWT Access Token"
          type: string
          required: true
        - in: body
          name: "vote"
          description: "Vote paramiter takes -1, 0 or 1 as vaild values. -1 equals a downvote, 0 equals a neutral vote, and 1 equals an upvote."
          schema:
            $ref: "#/definitions/postVotes"
      responses:
        201:
          description: "Vote created!"
        400:
          schema:
            $ref: "#/definitions/error"
          description: "Missing requestParameter!"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#/definitions/error"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"

  ################################################################
  #                          Session                             #
  ################################################################
  /session:
    post:
      tags:
        - "session"
      summary: "Create a session for an account."
      description: "Used to create a new session. If successful it will returns a JWT that should be sent to specified requests."
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "x-www-form-urlencoded"
          name: "grant_type"
          description: 'Should be set to "password"'
          type: string
          required: true
        - name: "email"
          in: "x-www-form-urlencoded"
          description: "The email of the account."
          type: "string"
          required: true
        - name: "password"
          in: "x-www-form-urlencoded"
          type: "string"
          description: "The password of the account."
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/sessionResponse"
        400:
          schema:
            $ref: "#/definitions/error"
          description: "Bad Request!"
        401:
          description: "Unauthorized!"
          schema:
            $ref: "#/definitions/error"
        404:
          description: "Account not found!"
          schema:
            $ref: "#/definitions/error"
        500:
          schema:
            $ref: "#/definitions/error"
          description: "Internal server error!"

################################################################
#                          Models                             #
################################################################
definitions:
  error:
    type: object
    properties:
      errorMessage:
        type: string
  postAccount:
    type: object
    properties:
      email:
        type: string
        format: "email"
        example: "foo@gmail.com"
      password:
        type: string
        format: "password"
    required:
      - password
      - email
  recipes:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      title:
        type: string
      content:
        type: string
      imageId:
        type: string
        format: path
      updatedAt:
        type: string
    required:
      - accountId
  getComments:
    type: object
    properties:
      accountId:
        type: string
      recipeId:
        type: string
      content:
        type: string
      commentId:
        type: string
      updatedAt:
        type: string
  postComments:
    type: object
    properties:
      content:
        type: string
      recipeId:
        type: string
    required:
      - accountId
      - recipeId
  accounts:
    type: object
    properties:
      id:
        type: string
      nickname:
        type: string
      imageId:
        type: string
  getVotes:
    type: object
    properties:
      title:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
  postVotes:
    type: object
    properties:
      accountId:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
        example: '"vote: 0", "vote: 1", "vote: -1"'
    required:
      - accountId
      - recipeId
      - vote
  session:
    type: object
    properties:
      grant_Type:
        type: string
      username:
        type: string
      password:
        type: string
    required:
      - grant_Type
      - username
      - password
  sessionResponse:
    type: object
    properties:
      auth:
        type: string
      token:
        type: string
