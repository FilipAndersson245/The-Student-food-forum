swagger: "2.0"

info:
  version: 1.0.0
  title: "The Student Food forum"
  description: "A forum API where accounts can post recipts about food and comment to them."
  contact:
    name: "Filip Andersson"
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
host: "localhost"
basePath: "/v1"
tags:
  - name: "accounts"
  - name: "votes"
  - name: "comments"
  - name: "tags"
  - name: "recipes"
schemes:
  - "http"
  - "https"

securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: "https://localhost:3000/authorize"
    tokenUrl: "https://exemple.com/oauth/token"
    scopes:
      account: Grand access to all content and possibility to edit own content.
      admin: All access of account and the power to change others posts
security:
  - ApiKeyAuth: []
  - OAuth2: [account, admin]

paths:
  ################################################################
  #                          Account                                #
  ################################################################
  /accounts:
    get:
      tags:
        - "accounts"
      summary: "Get accounts."
      description: ""
      parameters:
        - in: query
          name: search
          type: string
          description: "Query string that will filter search result on accounts nickname."
        - in: query
          name: order
          type: string
          enum: [alphabetical, rating]
          description: "How accounts are returned accounts are sorted."
          default: rating
        - in: query
          name: limit
          type: integer
          description: "How many accounts will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many accounts that will be skipped."
          default: 0

      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/accounts"
        # 404:
        #   description: "Resource not found."
        500:
          description: "Internal server error."

    post:
      tags:
        - "accounts"
      summary: "Create a new account."
      parameters:
        - in: "body"
          name: "account"
          schema:
            type: object
            allOf:
              - $ref: "#/definitions/userCredentials"
            properties:
              nickname:
                type: string

      consumes:
        - "application/json"
      responses:
        201:
          description: "Account created."
          headers:
            Location:
              type: "string"
        400:
          description: "Incorrect requirements or missing Values."
        409:
          description: "Account already exists on the server."
        500:
          description: "Server error."
  /accounts/{userId}:
    put:
      tags:
        - "accounts"
      summary: "Edit given account."
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          description: "userId"
          type: "string"
          required: true
        - name: "account"
          in: "body"
          description: "The update to the account. All fields that are not empty in the body will be updated."
          schema:
            type: object
            properties:
              password:
                type: string
              nickname:
                type: string
              email:
                type: string
              image:
                type: string
      responses:
        200:
          description: "OK"
        400:
          description: "Incorrect requirements."
        500:
          description: "Internal server error"
    delete:
      tags:
        - "accounts"
      summary: "Delete given account."
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          description: "userId"
          type: "string"
          required: true
      responses:
        200:
          description: "Account succsessfully deleted"
        404:
          description: "Account not found."
        500:
          description: "Internal server error"

  # /accounts/login:
  #   post:
  #     tags:
  #       - "accounts"
  #     summary: "Logs account into the platform."
  #     consumes:
  #       - "application/json"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       - in: "body"
  #         name: "body"
  #         description: "Login credentials"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/userCredentials"
  #     responses:
  #       200:
  #         description: "Valid login"
  #       401:
  #         description: "Unauthorized"

  # /accounts/logout:
  #   post:
  #     tags:
  #       - "accounts"
  #     summary: "Logs the account out of the platform."
  #     responses:
  #       200:
  #         description: "Successfull logout"
  #       500:
  #         description: "Internal server error"
  ################################################################
  #                          Recipes                             #
  ################################################################
  /recipes:
    get:
      tags:
        - "recipes"
      summary: "Get all recipes."
      description: ""
      parameters:
        - in: query
          name: recipesId
          type: string
          description: "Id of the recipes"
        - in: query
          name: title
          type: string
          description: "Title of the recipes"
        - in: query
          name: authorId
          type: string
          description: "Id of the author"
        - in: query
          name: tags
          type: array
          description: "list of tags to be filterd by"
          items:
            type: string
        - in: query
          name: order
          type: string
          enum: [alphabetical, time, rating]
          description: "How recipes are sorted."
          default: rating
        - in: query
          name: limit
          type: integer
          description: "How many recipes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many recipes that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/recipes"

        404:
          description: "No recipes found"
        500:
          description: "Internal server error"
    post:
      tags:
        - "recipes"
      summary: "Create new recipes."
      parameters:
        - in: body
          name: recipe
          schema:
            allOf:
              - $ref: "#/definitions/recipes"
            properties:
              tags:
                type: array
                items:
                  type: string
      description: ""
      responses:
        201:
          description: "Recipes created"
          headers:
            Location:
              type: "string"
        500:
          description: "Internal server error"

  /recipes/{recipesId}:
    put:
      tags:
        - "recipes"
      summary: "Edit a given post."
      description: ""
      parameters:
        - name: "recipesId"
          in: "path"
          description: "recipesId"
          type: "string"
          required: true
        - name: "recipes"
          in: "body"
          schema:
            type: "object"
            properties:
              content:
                type: string
              img:
                type: string
                format: binary
              tags:
                type: array
                items:
                  type: string
      responses:
        200:
          description: "Successfully changed"
        404:
          description: "recipes not found"
        400:
          description: "Bad request"

    delete:
      tags:
        - "recipes"
      summary: "Delete a given recipes."
      description: ""
      parameters:
        - name: "recipesId"
          in: "path"
          description: "recipesId"
          type: "string"
          required: true
      responses:
        200:
          description: "Successfully deleted recipes"

        404:
          description: "Post not found"
        400:
          description: "Bad request"
  ################################################################
  #                          Comments                            #
  ################################################################
  /comments:
    get:
      tags:
        - "comments"
      summary: "Get all comments."
      description: ""
      parameters:
        - in: "query"
          name: "recipesId"
          type: "string"
          required: false
          description: "Get all comments for a specific recipesId"

        - in: query
          name: order
          type: string
          enum: [alphabetical, time]
          description: "How accounts are returned accounts are sorted."
          default: time
        - in: query
          name: limit
          type: integer
          description: "How many comments will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many comments that will be skipped."
          default: 0
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/getComments"
        404:
          description: "No comments found"
    post:
      tags:
        - "comments"
      summary: "Create new comment."
      description: ""
      parameters:
        - in: "body"
          name: "comment"
          schema:
            $ref: "#/definitions/postComments"

      responses:
        201:
          description: "Comment successfully created"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

  /comments/{commentId}:
    put:
      tags:
        - "comments"
      summary: "Edit a given account."
      description: ""
      parameters:
        - name: "commentId"
          in: "path"
          description: "comment Id"
          type: "string"
          required: true
        - name: "comment"
          in: body
          description: "The content of comment"
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: "Successfully changed"
        404:
          description: "Comment not found"
        500:
          description: "Internal server error"

    delete:
      tags:
        - "comments"
      summary: "Delete a given account."
      description: ""
      parameters:
        - name: "commentId"
          in: "path"
          description: "comment id"
          type: "string"
          required: true
      responses:
        200:
          description: "Successfully deleted"
        404:
          description: "Comment not found"
        500:
          description: "Internal server error"
  ################################################################
  #                          Tags                                #
  ################################################################
  /tags:
    get:
      tags:
        - "tags"
      summary: "Get all tags."
      description: ""
      parameters:
        - in: query
          name: filter
          type: string
          description: "Filter tags based on a query"
        - in: query
          name: recipesId
          type: string
          description: "get all tags for a specific recipe"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/tags"
        404:
          description: "Not tags found"
        500:
          description: "Internal server error"

  /votes:
    get:
      tags:
        - "votes"
      summary: "Get votes from one account."
      description: "Gets all the accounts own votes"
      parameters:
        - in: query
          name: "userId"
          type: string
          required: true
        - in: query
          name: order
          type: string
          enum: [alphabetical, time, rating]
          description: "How votes are sorted."
          default: rating
        - in: query
          name: limit
          type: integer
          description: "How many votes will be returned."
          default: 25
        - in: query
          name: offset
          type: integer
          description: "How many votes that will be skipped."
          default: 0
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: "#/definitions/getVotes"
        404:
          description: "Not tags found"
    post:
      tags:
        - "votes"
      summary: "Create a vote from a account"
      description: ""
      parameters:
        - in: body
          name: "vote"
          schema:
            $ref: "#/definitions/postVotes"
      responses:
        201:
          description: "Vote created"
        404:
          description: "account or recipe dosnt exist"
################################################################
#                          Models                             #
################################################################
definitions:
  userCredentials:
    type: object
    properties:
      email:
        type: "string"
        format: "email"
        example: "bob@gmail.com"
      password:
        type: string
        format: "password"
    required:
      - password
      - email
  recipes:
    type: object
    properties:
      userId:
        type: string
        format: uuid
      title:
        type: string
      content:
        type: string
      img:
        type: string
        format: path
    required:
      - userId
  getComments:
    type: object
    properties:
      userId:
        type: string
      content:
        type: string
      commentId:
        type: string
  postComments:
    type: object
    properties:
      userId:
        type: string
      content:
        type: string
      recipeId:
        type: string
    required:
      - userId
      - recipeId
  tags:
    type: object
    properties:
      id:
        type: string
        format: nameOfTag
    required:
      - id
  accounts:
    type: object
    properties:
      nickname:
        type: string
      img:
        type: string
        format: path
      id:
        type: string
  postVotes:
    type: object
    properties:
      userId:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
    required:
      - userId
      - recipeId
      - vote
  getVotes:
    type: object
    properties:
      title:
        type: string
      recipeId:
        type: string
      vote:
        type: integer
        format: smallint
